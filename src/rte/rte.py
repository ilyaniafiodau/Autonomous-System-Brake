#!/bin/python3

import json
import os

def generateCode(json_file):
    with open(json_file, 'r') as file:
        description = json.load(file)

    # Includes
    headerCode = []
    headerCode.append("""
/*
THIS FILE HAS BEEN AUTOGENERATED. DO NOT EDIT!
*/""")
    headerCode.append('#pragma once')
    headerCode.append('#include "types.h"')

    # Sources
    sourceCode = []
    sourceCode.append("""
/*
THIS FILE HAS BEEN AUTOGENERATED. DO NOT EDIT!
*/""")
    sourceCode.append('#include "types.h"')
    sourceCode.append('#include "rte.hpp"')
    
    for config in description["config"]:
        global_namespace = config['namespace']

    for config in description["data"]:
        default_value = config['default_value']
        local_namespace = config['namespace']
        publisher = config['publisher']
        storage_name = config['storage_name']
        storage_type = config['storage_type']

        header = f"""
namespace {local_namespace} {{ class {publisher}; }}
namespace {global_namespace}
{{
class {storage_name}
{{
friend class {local_namespace}::{publisher};
public:
    /// @brief READ-ONLY access to the {storage_name} register
    static {storage_type} const &ro();
private:
    /// @brief READ-WRITE access to the {storage_name} register
    static {storage_type} &rw();
}};
}}
"""
        source = f"""
{storage_type} const &{global_namespace}::{storage_name}::ro() {{
    return static_cast<{storage_type} const &>(rw());
}}

{storage_type} &{global_namespace}::{storage_name}::rw() {{
    static {storage_type} data = {default_value};
    return static_cast<{storage_type} &>(data);
}}
"""
        headerCode.append(header.strip())
        sourceCode.append(source.strip())

    return "\n\n".join(headerCode), "\n\n".join(sourceCode)

if __name__ == "__main__":
    json_file = 'rte.json'  # Path to your JSON file
    headerCode, sourceCode = generateCode(json_file)
    
    os.makedirs("generated", exist_ok=True)
    os.chdir("generated")
    with open(f"{json_file.split('.')[0]}.hpp", 'w') as file:
        file.write(headerCode)
    with open(f"{json_file.split('.')[0]}.cpp", 'w') as file:
        file.write(sourceCode)
