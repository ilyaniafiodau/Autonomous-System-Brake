
/*
THIS FILE HAS BEEN AUTOGENERATED. DO NOT EDIT!
*/

#pragma once

#include "types.h"

namespace asb::acs { class AcsTask; }
namespace asb::rte
{
class ACTUAL_TORQUE_Nm
{
friend class asb::acs::AcsTask;
public:
    /// @brief READ-ONLY access to the ACTUAL_TORQUE_Nm register
    static brt::types::torque_Nm const &ro();
private:
    /// @brief READ-WRITE access to the ACTUAL_TORQUE_Nm register
    static brt::types::torque_Nm &rw();
};
}

namespace asb::acs { class VcduDataProvider; }
namespace asb::rte
{
class REQUIRED_TORQUE_Nm
{
friend class asb::acs::VcduDataProvider;
public:
    /// @brief READ-ONLY access to the REQUIRED_TORQUE_Nm register
    static brt::types::torque_Nm const &ro();
private:
    /// @brief READ-WRITE access to the REQUIRED_TORQUE_Nm register
    static brt::types::torque_Nm &rw();
};
}

namespace asb::acs { class AcsTask; }
namespace asb::rte
{
class ACS_ERROR
{
friend class asb::acs::AcsTask;
public:
    /// @brief READ-ONLY access to the ACS_ERROR register
    static brt::types::eBits8 const &ro();
private:
    /// @brief READ-WRITE access to the ACS_ERROR register
    static brt::types::eBits8 &rw();
};
}

namespace asb::command { class VcduDataProvider; }
namespace asb::rte
{
class FSM_MISSION_REQUEST
{
friend class asb::command::VcduDataProvider;
public:
    /// @brief READ-ONLY access to the FSM_MISSION_REQUEST register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_MISSION_REQUEST register
    static brt::types::condition &rw();
};
}

namespace asb::command { class VcduDataProvider; }
namespace asb::rte
{
class FSM_INIT_CHECK_UP_REQUEST
{
friend class asb::command::VcduDataProvider;
public:
    /// @brief READ-ONLY access to the FSM_INIT_CHECK_UP_REQUEST register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_INIT_CHECK_UP_REQUEST register
    static brt::types::condition &rw();
};
}

namespace asb::command { class VcduDataProvider; }
namespace asb::rte
{
class FSM_GO_SIGNAL
{
friend class asb::command::VcduDataProvider;
public:
    /// @brief READ-ONLY access to the FSM_GO_SIGNAL register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_GO_SIGNAL register
    static brt::types::condition &rw();
};
}

namespace asb::command { class VcduDataProvider; }
namespace asb::rte
{
class FSM_RESET_ASB
{
friend class asb::command::VcduDataProvider;
public:
    /// @brief READ-ONLY access to the FSM_RESET_ASB register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_RESET_ASB register
    static brt::types::condition &rw();
};
}

namespace asb::command { class VcduDataProvider; }
namespace asb::rte
{
class FSM_ASB_FINISH
{
friend class asb::command::VcduDataProvider;
public:
    /// @brief READ-ONLY access to the FSM_ASB_FINISH register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_ASB_FINISH register
    static brt::types::condition &rw();
};
}

namespace asb::init { class InitTask; }
namespace asb::rte
{
class FSM_INIT_CHECK_UP_EMERGENCY
{
friend class asb::init::InitTask;
public:
    /// @brief READ-ONLY access to the FSM_INIT_CHECK_UP_EMERGENCY register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_INIT_CHECK_UP_EMERGENCY register
    static brt::types::condition &rw();
};
}

namespace asb::init { class InitTask; }
namespace asb::rte
{
class FSM_INIT_CHECK_UP_OK
{
friend class asb::init::InitTask;
public:
    /// @brief READ-ONLY access to the FSM_INIT_CHECK_UP_OK register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_INIT_CHECK_UP_OK register
    static brt::types::condition &rw();
};
}

namespace asb::driverlessRun { class DriverlessRunTask; }
namespace asb::rte
{
class FSM_RUN_EMERGENCY
{
friend class asb::driverlessRun::DriverlessRunTask;
public:
    /// @brief READ-ONLY access to the FSM_RUN_EMERGENCY register
    static brt::types::condition const &ro();
private:
    /// @brief READ-WRITE access to the FSM_RUN_EMERGENCY register
    static brt::types::condition &rw();
};
}